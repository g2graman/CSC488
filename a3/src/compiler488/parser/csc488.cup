// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;    // Must always import this.
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;
import compiler488.ast.*;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

  String lastError;

    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
  {
  String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
      {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      /* s.left is supposed to hold the line number of the error.
       * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
       */

            if (s.left >= 0)        // Check line number.
    {
                st += " in line " + (s.left + 1);
                if (s.right >= 0)     // Check column number.
                    st += ", column " + (s.right + 1);
    }
            else
               st += " at end of input " ;
           }
      st += ": " + message;
        System.err.println (st);
        lastError = st;
  }

    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException            */
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
  {
        report_error (message, info);
        throw new SyntaxErrorException (lastError);
  }

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010

// Terminals returned by the scanner with no value attached.
terminal  AND,  OR, NOT,  TRUE, FALSE ;
terminal  BOOLEAN,INTEGER,FUNCTION,PROCEDURE  ;
terminal  BEGIN,  DO, ELSE, END,  EXIT  ;
terminal  IF, RETURN, LOOP, PUT,  GET ;
terminal  THEN, WHILE,  SKIP, YIELDS, WHEN  ;

// Special-character terminals, no value attached
terminal  L_PAREN ,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY ;
terminal  EQUAL,  GREATER, LESS,  COMMA,  DOT ;
terminal  PLUS, MINUS,  TIMES,  DIVIDE  ;

// Terminals returned by the scanner with a value.
terminal String  IDENT  ;
terminal Integer INTCONST ;
terminal String  TEXTCONST  ;

// Non-terminals that have no value.
// nonterminal xxx

// top most nodes
nonterminal Program program;
nonterminal Scope scope;

// statement and declaration
nonterminal Stmt statement;
nonterminal Declaration declaration;

// procedure call statement
nonterminal ProcedureCallStmt procedureCall ;

// list of statements
nonterminal ASTList<Stmt> declarationsAndStatements;

// type node
nonterminal Type type;

// expn nodes
nonterminal Expn output, primary, factor, term, arithExpn, compareExpn, negation, conjunction;
nonterminal Expn expression, variable;
nonterminal ConstExpn constant;

// List of expressions
nonterminal ASTList<Expn> arguments;

// parameters
nonterminal ASTList<ScalarDecl> parameters;
nonterminal ScalarDecl parameter;

// variables
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal DeclarationPart variablename;

// inputs and outputs
nonterminal ASTList<Expn> inputs;
nonterminal ASTList<Printable> outputs;

// bounds
nonterminal Integer generalBound;
nonterminal Integer[] bound ;


// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;    // Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program   ::= scope:SCOPE
      {: RESULT = new Program( SCOPE ); RESULT.setLocation(SCOPEleft, SCOPEright); :}
      ;       // the main program

scope   ::= BEGIN declarationsAndStatements:BODY END  // non empty scope
      {: RESULT = new Scope( BODY ); RESULT.setLocation(BODYleft, BODYright); :}

      | BEGIN END       // empty scope
      {: RESULT = new Scope(); :}
    ;

//  sequence of arbitrarily intermixed declarations and statements
declarationsAndStatements ::= statement:STMT
        {: RESULT = new ASTList<Stmt>( STMT ); RESULT.setLocation(STMTleft, STMTright); :}

        | declaration:DECL
        {: RESULT = new ASTList<Stmt>( DECL ); RESULT.setLocation(DECLleft, DECLright); :}

        | declarationsAndStatements:STMT_LIST statement:STMT
        {: RESULT = STMT_LIST.append( STMT ); RESULT.setLocation(STMT_LISTleft, STMTright); :}

        | declarationsAndStatements:STMT_LIST declaration:DECL
        {: RESULT = STMT_LIST.append( DECL ); RESULT.setLocation(STMT_LISTleft, DECLright); :}
        ;

statement ::= variable:LVALUE LESS EQUAL expression:RVALUE        // assignment statement
    {: RESULT = new AssignStmt( LVALUE, RVALUE ); RESULT.setLocation(LVALUEleft, LVALUEright); :}

    | IF expression:EXPN THEN declarationsAndStatements:TRUECASE END  // if statements
    {: RESULT = new IfStmt( EXPN, TRUECASE ); RESULT.setLocation(EXPNleft, EXPNright); :}

    | IF expression:EXPN THEN declarationsAndStatements:TRUECASE ELSE declarationsAndStatements:FALSECASE END
    {: RESULT = new IfStmt( EXPN, TRUECASE, FALSECASE ); RESULT.setLocation(EXPNleft, EXPNright); :}

    | WHILE expression:EXPN DO declarationsAndStatements:BODY END // while statement
    {: RESULT = new WhileDoStmt( EXPN, BODY); RESULT.setLocation(EXPNleft, EXPNright); :}

    | LOOP declarationsAndStatements:BODY END     // loop statement
    {: RESULT = new LoopStmt( BODY ); RESULT.setLocation(BODYleft, BODYright); :}

    | EXIT              // exit statements
    {: RESULT = new ExitStmt(); :}

    | EXIT WHEN expression:EXPN
    {: RESULT = new ExitStmt( EXPN ); RESULT.setLocation(EXPNleft, EXPNright); :}

    | RETURN              // return statements
    {: RESULT = new ReturnStmt(); :}

    | RETURN L_PAREN expression:VALUE R_PAREN
    {: RESULT = new ReturnStmt( VALUE ); RESULT.setLocation(VALUEleft, VALUEright); :}

    | PUT outputs:OUT_LIST            // input/output statments
    {: RESULT = new PutStmt( OUT_LIST ); RESULT.setLocation(OUT_LISTleft, OUT_LISTright); :}

    | GET  inputs:IN_LIST
    {: RESULT = new GetStmt( IN_LIST ); RESULT.setLocation(IN_LISTleft, IN_LISTright); :}

    | procedureCall:CALLNAME            // procedure call
    {: RESULT = CALLNAME; RESULT.setLocation(CALLNAMEleft, CALLNAMEright); :}

    | scope:SCOPE             // embedded scope
    {: RESULT = SCOPE; RESULT.setLocation(SCOPEleft, SCOPEright); :}
    ;

procedureCall ::= IDENT:NAME          // call procedure with no parameters
    {: RESULT = new ProcedureCallStmt( NAME ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | IDENT:NAME L_PAREN arguments:ARGS R_PAREN   // call procedure with parameters
    {: RESULT = new ProcedureCallStmt( NAME, ARGS ); RESULT.setLocation(ARGSleft, ARGSright); :}
    ;

declaration ::= type:TYPE variablenames:VAR_LIST      // declare scalar/array variables
    {: RESULT = new MultiDeclarations( TYPE, VAR_LIST ); RESULT.setLocation(TYPEleft, TYPEright); :}

    | type:TYPE FUNCTION IDENT:NAME scope:SCOPE   // declare function
    {: RESULT = new RoutineDecl( NAME, TYPE, SCOPE ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | type:TYPE FUNCTION IDENT:NAME L_PAREN parameters:PARAM_LIST R_PAREN scope:SCOPE
    {: RESULT = new RoutineDecl( NAME, TYPE, PARAM_LIST, SCOPE ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | PROCEDURE IDENT:NAME scope:SCOPE      //  declare procedure
    {: RESULT =  new RoutineDecl( NAME, SCOPE ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | PROCEDURE IDENT:NAME L_PAREN parameters:PARAM_LIST R_PAREN scope:SCOPE
    {: RESULT =  new RoutineDecl( NAME, PARAM_LIST, SCOPE ); RESULT.setLocation(NAMEleft, NAMEright); :}
    ;

variablenames ::= variablename:VAR_NAME         // list of variables being declared
    {: RESULT = new ASTList<DeclarationPart>( VAR_NAME ); RESULT.setLocation(VAR_NAMEleft, VAR_NAMEright); :}

    | variablenames:VAR_LIST COMMA variablename:VAR_NAME
    {: RESULT = VAR_LIST.append( VAR_NAME ); RESULT.setLocation(VAR_LISTleft, VAR_LISTright); :}
    ;

variablename  ::= IDENT:NAME            // scalar variable
    {: RESULT = new ScalarDeclPart( NAME ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | IDENT:NAME L_SQUARE bound:UPPERB R_SQUARE     // one dimensional array variable
    {: RESULT = new ArrayDeclPart( NAME, UPPERB ); RESULT.setLocation(UPPERBleft, UPPERBright); :}

    | IDENT:NAME L_SQUARE bound:LOWERB COMMA bound:UPPERB  R_SQUARE // two dimensional array variable
    {: RESULT = new ArrayDeclPart( NAME, LOWERB, UPPERB ); RESULT.setLocation(LOWERBleft, UPPERBright); :}
    ;

bound   ::= INTCONST:VAL          // positive array bound
    {: RESULT = new Integer[] { 1, VAL }; :}

    | generalBound:LOWERB DOT DOT generalBound:UPPERB   // positive or negative array bounds
    {: RESULT = new Integer[] { LOWERB, UPPERB }; :}
    ;

generalBound  ::= INTCONST:VAL    // positive array bound
    {: RESULT = new Integer( VAL ); :}

    | MINUS INTCONST:VAL    // negative array bound
    {: RESULT = new Integer( -VAL ); :}
    ;

type    ::= INTEGER     // integer type
    {: RESULT = new IntegerType(); :}

    | BOOLEAN     // boolean type
    {: RESULT = new BooleanType(); :}
    ;

outputs   ::= output:OUT      // list of output expressions
    {: RESULT = new ASTList<Printable>( OUT ); RESULT.setLocation(OUTleft, OUTright); :}

    | outputs:OUT_LIST COMMA output:OUT
    {: RESULT = OUT_LIST.append( OUT ); RESULT.setLocation(OUT_LISTleft, OUTright); :}
    ;

output    ::= expression:EXPN   // integer expression
    {: RESULT = EXPN; RESULT.setLocation(EXPNleft, EXPNright); :}

    | TEXTCONST:TXT   // text constant
    {: RESULT = new TextConstExpn( TXT ); RESULT.setLocation(TXTleft, TXTright); :}

    | SKIP      // skip pseudo constant
    {: RESULT = new SkipConstExpn(); :}
    ;

inputs    ::= variable:VAR_EXPN   // list of variables being read into
    {: RESULT = new ASTList<Expn>( VAR_EXPN ); RESULT.setLocation(VAR_EXPNleft, VAR_EXPNright); :}

    | inputs:IN_LIST COMMA variable:IN
    {: RESULT = IN_LIST.append( IN ); RESULT.setLocation(IN_LISTleft, INright); :}
    ;

arguments ::= expression:EXPN     // list of function/procedure arguments
    {: RESULT = new ASTList<Expn>( EXPN ); RESULT.setLocation(EXPNleft, EXPNright); :}

    | arguments:ARGS COMMA expression:EXPN
    {: RESULT = ARGS.append( EXPN ); RESULT.setLocation(ARGSleft, EXPNright); :}
    ;

parameters  ::= parameter:PARAMVAL      // list of function/procedure formal parameters
    {: RESULT = new ASTList<ScalarDecl>( PARAMVAL ); RESULT.setLocation(PARAMVALleft, PARAMVALright); :}

    | parameters:PARAMS COMMA parameter:PARAMITEM
    {: RESULT = PARAMS.append( PARAMITEM ); RESULT.setLocation(PARAMSleft, PARAMITEMright); :}
    ;

parameter ::= type:TYPE IDENT:NAME      // declare one parameter
    {: RESULT = new ScalarDecl( NAME, TYPE ); RESULT.setLocation(NAMEleft, NAMEright); :}
    ;

expression  ::= conjunction:EXPRSN      // disjunctions, associate left-to-right
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | expression:LEFT OR conjunction:RIGHT
    {: RESULT = new BoolExpn( "|", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}
    ;

conjunction ::= negation:EXPRSN     // conjunctions, associate left-to-right
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | conjunction:LEFT AND negation:RIGHT
    {: RESULT = new BoolExpn( "&", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}
    ;

negation  ::= compareExpn:EXPRSN      // negations
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | NOT negation:EXPRSN
    {: RESULT = new NotExpn( EXPRSN ); RESULT.setLocation(EXPRSNleft, EXPRSNright); :}
    ;

// type is Expn
compareExpn ::= arithExpn:EXPRSN      // comparisons, do not associate
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | arithExpn:LEFT EQUAL arithExpn:RIGHT
    {: RESULT = new EqualsExpn( "=", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT NOT EQUAL arithExpn:RIGHT
    {: RESULT = new EqualsExpn( "!=", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT LESS arithExpn:RIGHT
    {: RESULT = new CompareExpn( "<", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT LESS EQUAL arithExpn:RIGHT
    {: RESULT = new CompareExpn( "<=", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT GREATER arithExpn:RIGHT
    {: RESULT = new CompareExpn( ">", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT GREATER EQUAL arithExpn:RIGHT
    {: RESULT = new CompareExpn( ">=", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}
    ;

// type is ArithExpn
arithExpn ::= term:EXPRSN       // expressions, associate + , - left-to-right
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | arithExpn:LEFT  PLUS  term:RIGHT
    {: RESULT = new ArithExpn( "+", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | arithExpn:LEFT  MINUS term:RIGHT
    {: RESULT = new ArithExpn( "-", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}
    ;

// type is expn
term    ::= factor:EXPRSN       // terms, associate * , /   left-to-right
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | term:LEFT TIMES factor:RIGHT
    {: RESULT = new ArithExpn( "*", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}

    | term:LEFT DIVIDE factor:RIGHT
    {: RESULT = new ArithExpn( "/", LEFT, RIGHT ); RESULT.setLocation(LEFTleft, RIGHTright); :}
    ;

// factor type is expression
factor    ::= primary:EXPRSN        // unary minus
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | MINUS factor:EXPN
    {: RESULT = new UnaryMinusExpn( EXPN ); RESULT.setLocation(EXPNleft, EXPNright); :}
    ;

// type is Expn
primary   ::= constant:CONST        // integer or boolean constant
    {: RESULT = CONST; RESULT.setLocation(CONSTleft, CONSTright); :}

    | variable:VAR_EXPN       // scalar, array variable or function call
    {: RESULT = VAR_EXPN; RESULT.setLocation(VAR_EXPNleft, VAR_EXPNright); :}

    | IDENT:NAME L_PAREN arguments:ARG_LIST R_PAREN   // function call
    {: RESULT = new FunctionCallExpn( NAME, ARG_LIST ); RESULT.setLocation(NAMEleft, NAMEright); :}

    |   L_PAREN  expression:EXPRSN  R_PAREN   // parenthesized expression
    {: RESULT = EXPRSN; RESULT.setLocation(EXPRSNleft, EXPRSNright); :}

    | L_CURLEY declarationsAndStatements:STMT YIELDS expression:EXPN R_CURLEY // anon function
    {:
      //RESULT = new RoutineDecl(null, new IntegerType(), new Scope( STMT.append( new ReturnStmt( EXPN ))));
      RESULT = new AnonFuncExpn(STMT, EXPN); RESULT.setLocation(STMTleft, STMTright); 
    :}
    ;

// type is ConstExpn
constant  ::= INTCONST:INT  // integer constant
    {: RESULT = new IntConstExpn( INT ); RESULT.setLocation(INTleft, INTright); :}

    | TRUE    // constant true
    {: RESULT = new BoolConstExpn( true ); :}

    | FALSE   // constant false
    {: RESULT = new BoolConstExpn( false ); :}
    ;

// type is Expn
variable  ::= IDENT:NAME          // scalar variable or function call
    {: RESULT = new IdentExpn( NAME ); RESULT.setLocation(NAMEleft, NAMEright); :}

    | IDENT:NAME L_SQUARE expression:EXPN R_SQUARE  // element of a 1-D  array
    {: RESULT = new SubsExpn( NAME, EXPN ); RESULT.setLocation(EXPNleft, EXPNright); :}

    | IDENT:NAME L_SQUARE expression:LOWERB COMMA expression:UPPERB R_SQUARE  // element of a 2-D array
    {: RESULT = new SubsExpn( NAME, LOWERB, UPPERB ); RESULT.setLocation(NAMEleft, NAMEright); :}
    ;


