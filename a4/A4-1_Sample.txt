PUSHMT % 1-2
SETD 0

% 1 - 3
% integer i addr 0 1 
% 		  j addr 0 2
%		  k addr 0 3
%		  l addr 0 4
%		  m addr 0 5

PUSH 0
PUSH 5
DUPN % we push 5 values onto the stack to reserve space for i,j,k,l,m

% 1 - 4
ADDR 0 3	% k
ADDR 0 1	% i
LOAD
PUSH 3
ADDR 		% i + 3
ADDR 0 2 	% j
LOAD
ADDR 0 3 	%k
LOAD
MUL 		% j * k
SUB 		% (i+3) - j*k
ADDR 0 3 	% k
LOAD
ADDR 0 4 	% l
LOAD
DIV 		% k/l 
ADD 		%(i+3) - j*k + k/l 
STORE

% 1 - 5
% boolean	p addr 0 6
%			q addr 0 7
%			r addr 0 8
%			s addr 0 9
%			t addr 0 10

PUSH 0
PUSH 5
DUPN

% 1 - 6
ADDR 0 8

ADDR 0 6
PUSH 1
STORE

% 1 - 7
ADDR 0 7
PUSH 0
STORE

% 1 - 8
ADDR 0 7
LOAD
PUSH 1
SUB 	% ! q

ADDR 0 6
LOAD
ADDR 0 7
LOAD
OR 		% ( p | q )

OR 		% ! q | ( p | q )

% evaluated AND remember we use deMorgan's
ADDR 0 9
LOAD	% s
PUSH 1
SUB
ADDR 0 6 % p
LOAD
PUSH 1
SUB		% ! p
PUSH 1
SUB
OR
PUSH 1
SUB		% (s & ! p)	

OR % ! q | ( p | q ) | (s & ! p)

STORE

% 1 - 9
ADDR 0 6	% p

ADDR 0 1
LOAD
ADDR 0 2
LOAD
LT			% ( i < j)

ADDR 0 3	% k
LOAD
ADDR 0 4	% l
LOAD
LT
ADDR 0 3	% k
LOAD
ADDR 0 4	% l
LOAD
EQ
OR			% ( k <= l )

OR			% ( i < j	) | ( k <= l )

ADDR 0 2
LOAD
ADDR 0 4
LOAD
EQ			% ( j = l )	

OR			% ( i < j	) | ( k <= l ) | ( j = l )	

STORE

% 1 - 10
ADDR 0 9

ADDR 0 3
LOAD
ADDR 0  5
LOAD
EQ
PUSH 1
SUB 		% (k !- m)
PUSH 1
SUB

ADDR 0 2
LOAD
ADDR 0 3
LOAD
LT
PUSH 1
SUB			% ( j >= k )
PUSH 1
SUB

OR
PUSH 1
SUB			% ( k ! = m ) & ( j >= k ) 

PUSH 1
SUB

ADDR 0 8
LOAD
ADDR 0 9
LOAD
EQ
PUSH 1
SUB			% ! ( r = s )

PUSH 1
SUB

OR
PUSH 1
SUB 		% ( k ! = m ) & ( j >= k ) & ! ( r = s )

STORE

% 1 - 11
ADDR 0 7

ADDR 0 8
LOAD
ADDR 0 9
LOAD
EQ			% r = s

ADDR 0 9
LOAD
PUSH 1
SUB			% ! s
ADDR 0 8
LOAD
EQ			% r
PUSH 1
SUB			% ( !s != r )

OR			% ( r = s	 ) | ( !s != r )	

STORE

% 1-12
PUSH 0
PUSH 7
DUPN 		% A[7]

PUSH 0
PUSH 150
PUSH 10
MULT
DUPN 		% B[-100..50, -40..-30]

% 1- 13
PUSH 0
PUSH 4
DUPN		% C[-7 .. -3]

PUSH 50
PUSH 20
MULT
DUPN		%  D[ 50, 20 ]

% 1-14
ADDR 0 18	% base address of B
ADDR 0 1
LOAD		% i
PUSH 1
ADD
PUSH -100
SUB
PUSH 10
MULT		% got offset of the outer dimension
ADDR 0 2
LOAD		%j
PUSH 100
SUB
PUSH -40
SUB			% offset of the innter dimension
ADD 		% offset within the entire array
ADD 		% final address of B[i+1, j-100 ]

ADDR 0 11 	% base address of A
ADDR 0 2 
LOAD 		% j
PUSH 2
SUB			% j - 2
ADD 		% final address of A[j-2]
LOAD
STORE

% 1-15
ADDR 0 1518
PUSH -4
PUSH -7
SUB
ADD 		% got the address of C[-4]

ADDR 0 1523
ADDR 0 1
LOAD
PUSH 20
ADD 		% i + 20
PUSH 20
MULT
ADDR 0 3
LOAD
PUSH 7
SUB			% k - 7
ADD 		% got offset within array
ADD 		% got final offset
LOAD

STORE

HALT

