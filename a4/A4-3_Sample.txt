%3-2
ADDR 0 0 			% save D[0]
PUSHMT
SETD 0

%3-3
PUSH 0
PUSH 4
DUPN

%3-4
PUSH false
PUSH 4
DUPN

%3-5
PUSH PROC_P_END 		% skip function/procedure setup
BR

(PROC_P address)--------------------------------------------------------

%3-7
ADDR 1 0 			% save D[1]
PUSHMT
SETD 1

PUSH 0
PUSH 2
DUPN				% e & f

%3-8
ADDR 0 5 
LOAD				% load p
PUSH IF_P_END		% if p is false, go to end of if
BF
PUSH IF_P_END 		% no content, go directly to end of if
BR
% (IF_P_END address)

%3-9
ADDR 0 1			% a
ADDR 1 1			% e
STORE				% e <= a

%3-11
PUSH 2
POPN 				% deallocate e & f

SETD 1 				% restore D[1]


(PROC_P_END address)----------------------------------------------------

%3-12
PUSH FUNC_F_END			% skip function/procedure setup
BR

(FUNC_F address)--------------------------------------------------------

%3-14
ADDR 1 0 			% save D[1]
PUSHMT
SETD 1

ADDR 1 -1 			% n
LOAD
PUSH IF_F_ELSE 
BF 					% if n is false, go to then
ADDR 0 2 			% b
LOAD
ADDR 1 -2 			% m
LOAD
ADD 				% m + b
STORE
PUSH IF_F_END
BR

%3-15
% (IF_F_ELSE address)
ADDR 1 -2			% m
LOAD
ADDR 0 3 			% c
LOAD
SUB 				% c - m
STORE
PUSH IF_F_END
BR
% (IF_F_END address)

SETD 1 				% restore D[1]

(FUNC_F_END address)----------------------------------------------------

%3-17
PUSH PROC_Q_END 		% skip function/procedure setup
BR

(PROC_Q address)--------------------------------------------------------

%3-19
ADDR 1 0 		% save D[1]
PUSHMT
SETD 1

PUSH 0
PUSH 3
DUPN 			% t, u, v

%3-20
PUSH FUNC_G_END 		% skip function/procedure setup
BR

(FUNC_G address)--------------------------------------------------------

%3-22
ADDR 2 0 		% save D[2]
PUSHMT
SETD 2

PUSH 0
PUSH 2
DUPN 			%  w, x

% 3-24
PUSH 0
PUSH 2
DUPN			% b, d
ADDR 0 3  		% c
ADDR 2 4 		% d
STORE 			% d <= c

% (FUNC_G_RETURN address)
PUSH FUNC_G_RETURN
PUSH PROC_P
BR 				% P

%3-25
PUSH 12
ADDR 1 3 		% v
LOAD
ADDR 2 1 		% w
LOAD
ADDR 0 4 		% d
LOAD
ADD 			% d + w
SUB 			% (d + w) - v
LT 				% d + w - v  < 12

PUSH 4
POPN 			% deallocate w,x,b,d

SETD 2 			% restore D[2]

(FUNC_G_END address)----------------------------------------------------

%3-27
% (FUNC_Q_RETURN address)
PUSH FUNC_Q_RETURN
PUSH FUNC_G
BR
NEG
PUSH 1
ADD 			% !G
ADDR 0 7 		% r
LOAD
OR 				% (!G | r)

PUSH 0
ADDR 0 1 		% a
LOAD
ADDR 1 1		% t
LOAD
ADDR 1 -2 		% n
LOAD
SUB 			% n - t
ADD 			% (n - t) + a


% (FUNC_Q_RETURN2 address)
PUSH FUNC_Q_RETURN2
PUSH FUNC_F
BR

PUSH 2
POPN 			% pop 2 arguments
PRINTC 			% ouput result of F( t - n + a  , ! G | r )

PUSH 3
POPN 			% deallocate t, u, v

SETD 1 			% restore D[1]

(PROC_Q_END address)----------------------------------------------------

% 3-29
PUSH 0				% return value of Q

% (RETURN_ADDR4)
PUSH RETURN_ADDR4
PUSH PROC_P 
BR 					% P

% 3-30
ADDR 0 5 			% p
LOAD
ADDR 0 6 			% q
LOAD
EQ
NEG
PUSH 1
ADD 				% (p != q) => !(p == q)

%3-29
PUSH 0 				% return value of outer F
ADDR 0 6 			% q
LOAD
NEG
PUSH 1
ADD 				% !q
PUSH 0 				% return value of inner F
ADDR 0 5 			% p
LOAD
ADDR 0 4 			% b
LOAD
% (RETURN_ADDR)
PUSH RETURN_DDR
PUSH FUNC_F
BR  				% F(b,p)
% (RETURN_ADDR2)
PUSH RETURN_ADDR2
PUSH FUNC_F
BR 					% F(F(b,p), !q)
ADDR 0 5 			% p
LOAD
NEG
PUSH 1
ADD 				% !p
ADDR 0 6 			% q
LOAD
OR  				% p | q
% (RETURN_ADDR3)
PUSH RETURN_ADDR3
PUSH FUNC_Q
BR 				% Q( ! p | q , F( F( b, p ), !q ), { P yields p != q } )

PUSH 8
POPN 				% deallocate a,b,c,d,p,q,r,s

SETD 0	 			% restore D[0]

HALT